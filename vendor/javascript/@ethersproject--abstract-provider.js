import{BigNumber as r}from"@ethersproject/bignumber";import{isHexString as e}from"@ethersproject/bytes";import{Description as t,defineReadOnly as o,resolveProperties as n}from"@ethersproject/properties";import{Logger as s}from"@ethersproject/logger";const a="abstract-provider/5.7.0";"use strict";var i=(void 0,function(r,e,t,o){function adopt(r){return r instanceof t?r:new t((function(e){e(r)}))}return new(t||(t=Promise))((function(t,n){function fulfilled(r){try{step(o.next(r))}catch(r){n(r)}}function rejected(r){try{step(o.throw(r))}catch(r){n(r)}}function step(r){r.done?t(r.value):adopt(r.value).then(fulfilled,rejected)}step((o=o.apply(r,e||[])).next())}))});const c=new s(a);class ForkEvent extends t{static isForkEvent(r){return!!(r&&r._isForkEvent)}}class BlockForkEvent extends ForkEvent{constructor(r,t){e(r,32)||c.throwArgumentError("invalid blockHash","blockHash",r);super({_isForkEvent:true,_isBlockForkEvent:true,expiry:t||0,blockHash:r})}}class TransactionForkEvent extends ForkEvent{constructor(r,t){e(r,32)||c.throwArgumentError("invalid transaction hash","hash",r);super({_isForkEvent:true,_isTransactionForkEvent:true,expiry:t||0,hash:r})}}class TransactionOrderForkEvent extends ForkEvent{constructor(r,t,o){e(r,32)||c.throwArgumentError("invalid transaction hash","beforeHash",r);e(t,32)||c.throwArgumentError("invalid transaction hash","afterHash",t);super({_isForkEvent:true,_isTransactionOrderForkEvent:true,expiry:o||0,beforeHash:r,afterHash:t})}}class Provider{constructor(){c.checkAbstract(new.target,Provider);o(this,"_isProvider",true)}getFeeData(){return i(this,void 0,void 0,(function*(){const{block:e,gasPrice:t}=yield n({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((r=>null))});let o=null,s=null,a=null;if(e&&e.baseFeePerGas){o=e.baseFeePerGas;a=r.from("1500000000");s=e.baseFeePerGas.mul(2).add(a)}return{lastBaseFeePerGas:o,maxFeePerGas:s,maxPriorityFeePerGas:a,gasPrice:t}}))}addListener(r,e){return this.on(r,e)}removeListener(r,e){return this.off(r,e)}static isProvider(r){return!!(r&&r._isProvider)}}export{BlockForkEvent,ForkEvent,Provider,TransactionForkEvent,TransactionOrderForkEvent};

