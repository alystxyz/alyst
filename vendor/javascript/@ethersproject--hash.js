import{keccak256 as e}from"@ethersproject/keccak256";import{toUtf8Bytes as t,toUtf8CodePoints as r,toUtf8String as A}from"@ethersproject/strings";import{concat as n,hexlify as o,arrayify as i,hexConcat as a,hexZeroPad as s,isHexString as c}from"@ethersproject/bytes";import{Logger as g}from"@ethersproject/logger";import{decode as u}from"@ethersproject/base64";import{getAddress as f}from"@ethersproject/address";import{BigNumber as l}from"@ethersproject/bignumber";import{defineReadOnly as h,deepCopy as d,shallowCopy as w}from"@ethersproject/properties";function id(r){return e(t(r))}const p="hash/5.7.0";function flat(e,t){null==t&&(t=1);const r=[];const A=r.forEach;const flatDeep=function(e,t){A.call(e,(function(e){t>0&&Array.isArray(e)?flatDeep(e,t-1):r.push(e)}))};flatDeep(e,t);return r}function fromEntries(e){const t={};for(let r=0;r<e.length;r++){const A=e[r];t[A[0]]=A[1]}return t}function decode_arithmetic(e){let t=0;function u16(){return e[t++]<<8|e[t++]}let r=u16();let A=1;let n=[0,1];for(let e=1;e<r;e++)n.push(A+=u16());let o=u16();let i=t;t+=o;let a=0;let s=0;function read_bit(){if(0==a){s=s<<8|e[t++];a=8}return s>>--a&1}const c=31;const g=Math.pow(2,c);const u=g>>>1;const f=u>>1;const l=g-1;let h=0;for(let e=0;e<c;e++)h=h<<1|read_bit();let d=[];let w=0;let p=g;while(true){let e=Math.floor(((h-w+1)*A-1)/p);let t=0;let o=r;while(o-t>1){let r=t+o>>>1;e<n[r]?o=r:t=r}if(0==t)break;d.push(t);let i=w+Math.floor(p*n[t]/A);let a=w+Math.floor(p*n[t+1]/A)-1;while(0==((i^a)&u)){h=h<<1&l|read_bit();i=i<<1&l;a=a<<1&l|1}while(i&~a&f){h=h&u|h<<1&l>>>1|read_bit();i=i<<1^u;a=(a^u)<<1|u|1}w=i;p=1+a-i}let m=r-4;return d.map((t=>{switch(t-m){case 3:return m+65792+(e[i++]<<16|e[i++]<<8|e[i++]);case 2:return m+256+(e[i++]<<8|e[i++]);case 1:return m+e[i++];default:return t-1}}))}function read_payload(e){let t=0;return()=>e[t++]}function read_compressed_payload(e){return read_payload(decode_arithmetic(e))}function signed(e){return 1&e?~e>>1:e>>1}function read_counts(e,t){let r=Array(e);for(let A=0;A<e;A++)r[A]=1+t();return r}function read_ascending(e,t){let r=Array(e);for(let A=0,n=-1;A<e;A++)r[A]=n+=1+t();return r}function read_deltas(e,t){let r=Array(e);for(let A=0,n=0;A<e;A++)r[A]=n+=signed(t());return r}function read_member_array(e,t){let r=read_ascending(e(),e);let A=e();let n=read_ascending(A,e);let o=read_counts(A,e);for(let e=0;e<A;e++)for(let t=0;t<o[e];t++)r.push(n[e]+t);return t?r.map((e=>t[e])):r}function read_mapped_map(e){let t=[];while(true){let r=e();if(0==r)break;t.push(read_linear_table(r,e))}while(true){let r=e()-1;if(r<0)break;t.push(read_replacement_table(r,e))}return fromEntries(flat(t))}function read_zero_terminated_array(e){let t=[];while(true){let r=e();if(0==r)break;t.push(r)}return t}function read_transposed(e,t,r){let A=Array(e).fill(void 0).map((()=>[]));for(let n=0;n<t;n++)read_deltas(e,r).forEach(((e,t)=>A[t].push(e)));return A}function read_linear_table(e,t){let r=1+t();let A=t();let n=read_zero_terminated_array(t);let o=read_transposed(n.length,1+e,t);return flat(o.map(((e,t)=>{const o=e[0],i=e.slice(1);return Array(n[t]).fill(void 0).map(((e,t)=>{let n=t*A;return[o+t*r,i.map((e=>e+n))]}))})))}function read_replacement_table(e,t){let r=1+t();let A=read_transposed(r,1+e,t);return A.map((e=>[e[0],e.slice(1)]))}function read_emoji_trie(e){let t=read_member_array(e).sort(((e,t)=>e-t));return read();function read(){let r=[];while(true){let A=read_member_array(e,t);if(0==A.length)break;r.push({set:new Set(A),node:read()})}r.sort(((e,t)=>t.set.size-e.set.size));let A=e();let n=A%3;A=A/3|0;let o=!!(1&A);A>>=1;let i=1==A;let a=2==A;return{branches:r,valid:n,fe0f:o,save:i,check:a}}}function getData(){return read_compressed_payload(u(""))}const m=getData();const B=new Set(read_member_array(m));const C=new Set(read_member_array(m));const E=read_mapped_map(m);const y=read_emoji_trie(m);const D=45;const Q=95;function explode_cp(e){return r(e)}function filter_fe0f(e){return e.filter((e=>65039!=e))}function ens_normalize_post_check(e){for(let t of e.split(".")){let e=explode_cp(t);try{for(let t=e.lastIndexOf(Q)-1;t>=0;t--)if(e[t]!==Q)throw new Error("underscore only allowed at start");if(e.length>=4&&e.every((e=>e<128))&&e[2]===D&&e[3]===D)throw new Error("invalid label extension")}catch(e){throw new Error(`Invalid label "${t}": ${e.message}`)}}return e}function ens_normalize(e){return ens_normalize_post_check(normalize(e,filter_fe0f))}function normalize(e,t){let r=explode_cp(e).reverse();let A=[];while(r.length){let e=consume_emoji_reversed(r);if(e){A.push(...t(e));continue}let n=r.pop();if(B.has(n)){A.push(n);continue}if(C.has(n))continue;let o=E[n];if(!o)throw new Error(`Disallowed codepoint: 0x${n.toString(16).toUpperCase()}`);A.push(...o)}return ens_normalize_post_check(nfc(String.fromCodePoint(...A)))}function nfc(e){return e.normalize("NFC")}function consume_emoji_reversed(e,t){var r;let A=y;let n;let o;let i=[];let a=e.length;t&&(t.length=0);while(a){let s=e[--a];A=null===(r=A.branches.find((e=>e.set.has(s))))||void 0===r?void 0:r.node;if(!A)break;if(A.save)o=s;else if(A.check&&s===o)break;i.push(s);if(A.fe0f){i.push(65039);a>0&&65039==e[a-1]&&a--}if(A.valid){n=i.slice();2==A.valid&&n.splice(1,1);t&&t.push(...e.slice(a).reverse());e.length=a}}return n}const I=new g(p);const Y=new Uint8Array(32);Y.fill(0);function checkComponent(e){if(0===e.length)throw new Error("invalid ENS name; empty component");return e}function ensNameSplit(e){const r=t(ens_normalize(e));const A=[];if(0===e.length)return A;let n=0;for(let e=0;e<r.length;e++){const t=r[e];if(46===t){A.push(checkComponent(r.slice(n,e)));n=e+1}}if(n>=r.length)throw new Error("invalid ENS name; empty component");A.push(checkComponent(r.slice(n)));return A}function ensNormalize(e){return ensNameSplit(e).map((e=>A(e))).join(".")}function isValidName(e){try{return 0!==ensNameSplit(e).length}catch(e){}return false}function namehash(t){"string"!==typeof t&&I.throwArgumentError("invalid ENS name; not a string","name",t);let r=Y;const A=ensNameSplit(t);while(A.length)r=e(n([r,e(A.pop())]));return o(r)}function dnsEncode(e){return o(n(ensNameSplit(e).map((e=>{if(e.length>63)throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");const t=new Uint8Array(e.length+1);t.set(e,1);t[0]=t.length-1;return t}))))+"00"}const v="Ethereum Signed Message:\n";function hashMessage(r){"string"===typeof r&&(r=t(r));return e(n([t(v),t(String(r.length)),r]))}var T=(void 0,function(e,t,r,A){function adopt(e){return e instanceof r?e:new r((function(t){t(e)}))}return new(r||(r=Promise))((function(r,n){function fulfilled(e){try{step(A.next(e))}catch(e){n(e)}}function rejected(e){try{step(A.throw(e))}catch(e){n(e)}}function step(e){e.done?r(e.value):adopt(e.value).then(fulfilled,rejected)}step((A=A.apply(e,t||[])).next())}))});const M=new g(p);const S=new Uint8Array(32);S.fill(0);const k=l.from(-1);const H=l.from(0);const N=l.from(1);const U=l.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");function hexPadRight(e){const t=i(e);const r=t.length%32;return r?a([t,S.slice(r)]):o(t)}const J=s(N.toHexString(),32);const K=s(H.toHexString(),32);const F={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"};const G=["name","version","chainId","verifyingContract","salt"];function checkString(e){return function(t){"string"!==typeof t&&M.throwArgumentError(`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t);return t}}const O={name:checkString("name"),version:checkString("version"),chainId:function(e){try{return l.from(e).toString()}catch(e){}return M.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",e)},verifyingContract:function(e){try{return f(e).toLowerCase()}catch(e){}return M.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){try{const t=i(e);if(32!==t.length)throw new Error("bad length");return o(t)}catch(e){}return M.throwArgumentError('invalid domain value "salt"',"domain.salt",e)}};function getBaseEncoder(t){{const e=t.match(/^(u?)int(\d*)$/);if(e){const r=""===e[1];const A=parseInt(e[2]||"256");(A%8!==0||A>256||e[2]&&e[2]!==String(A))&&M.throwArgumentError("invalid numeric width","type",t);const n=U.mask(r?A-1:A);const o=r?n.add(N).mul(k):H;return function(e){const r=l.from(e);(r.lt(o)||r.gt(n))&&M.throwArgumentError(`value out-of-bounds for ${t}`,"value",e);return s(r.toTwos(256).toHexString(),32)}}}{const e=t.match(/^bytes(\d+)$/);if(e){const r=parseInt(e[1]);(0===r||r>32||e[1]!==String(r))&&M.throwArgumentError("invalid bytes width","type",t);return function(e){const A=i(e);A.length!==r&&M.throwArgumentError(`invalid length for ${t}`,"value",e);return hexPadRight(e)}}}switch(t){case"address":return function(e){return s(f(e),32)};case"bool":return function(e){return e?J:K};case"bytes":return function(t){return e(t)};case"string":return function(e){return id(e)}}return null}function encodeType(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}class TypedDataEncoder{constructor(e){h(this,"types",Object.freeze(d(e)));h(this,"_encoderCache",{});h(this,"_types",{});const t={};const r={};const A={};Object.keys(e).forEach((e=>{t[e]={};r[e]=[];A[e]={}}));for(const A in e){const n={};e[A].forEach((o=>{n[o.name]&&M.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(A)}`,"types",e);n[o.name]=true;const i=o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];i===A&&M.throwArgumentError(`circular type reference to ${JSON.stringify(i)}`,"types",e);const a=getBaseEncoder(i);if(!a){r[i]||M.throwArgumentError(`unknown type ${JSON.stringify(i)}`,"types",e);r[i].push(A);t[A][i]=true}}))}const n=Object.keys(r).filter((e=>0===r[e].length));0===n.length?M.throwArgumentError("missing primary type","types",e):n.length>1&&M.throwArgumentError(`ambiguous primary types or unused types: ${n.map((e=>JSON.stringify(e))).join(", ")}`,"types",e);h(this,"primaryType",n[0]);function checkCircular(n,o){o[n]&&M.throwArgumentError(`circular type reference to ${JSON.stringify(n)}`,"types",e);o[n]=true;Object.keys(t[n]).forEach((e=>{if(r[e]){checkCircular(e,o);Object.keys(o).forEach((t=>{A[t][e]=true}))}}));delete o[n]}checkCircular(this.primaryType,{});for(const t in A){const r=Object.keys(A[t]);r.sort();this._types[t]=encodeType(t,e[t])+r.map((t=>encodeType(t,e[t]))).join("")}}getEncoder(e){let t=this._encoderCache[e];t||(t=this._encoderCache[e]=this._getEncoder(e));return t}_getEncoder(t){{const e=getBaseEncoder(t);if(e)return e}const r=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(r){const t=r[1];const A=this.getEncoder(t);const n=parseInt(r[3]);return r=>{n>=0&&r.length!==n&&M.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",r);let o=r.map(A);this._types[t]&&(o=o.map(e));return e(a(o))}}const A=this.types[t];if(A){const r=id(this._types[t]);return t=>{const n=A.map((({name:r,type:A})=>{const n=this.getEncoder(A)(t[r]);return this._types[A]?e(n):n}));n.unshift(r);return a(n)}}return M.throwArgumentError(`unknown type: ${t}`,"type",t)}encodeType(e){const t=this._types[e];t||M.throwArgumentError(`unknown type: ${JSON.stringify(e)}`,"name",e);return t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(t,r){return e(this.encodeData(t,r))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,r){{const A=getBaseEncoder(e);if(A)return r(e,t)}const A=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(A){const e=A[1];const n=parseInt(A[3]);n>=0&&t.length!==n&&M.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t);return t.map((t=>this._visit(e,t,r)))}const n=this.types[e];return n?n.reduce(((e,{name:A,type:n})=>{e[A]=this._visit(n,t[A],r);return e}),{}):M.throwArgumentError(`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new TypedDataEncoder(e)}static getPrimaryType(e){return TypedDataEncoder.from(e).primaryType}static hashStruct(e,t,r){return TypedDataEncoder.from(t).hashStruct(e,r)}static hashDomain(e){const t=[];for(const r in e){const A=F[r];A||M.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`,"domain",e);t.push({name:r,type:A})}t.sort(((e,t)=>G.indexOf(e.name)-G.indexOf(t.name)));return TypedDataEncoder.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,r){return a(["0x1901",TypedDataEncoder.hashDomain(e),TypedDataEncoder.from(t).hash(r)])}static hash(t,r,A){return e(TypedDataEncoder.encode(t,r,A))}static resolveNames(e,t,r,A){return T(this,void 0,void 0,(function*(){e=w(e);const n={};e.verifyingContract&&!c(e.verifyingContract,20)&&(n[e.verifyingContract]="0x");const o=TypedDataEncoder.from(t);o.visit(r,((e,t)=>{"address"!==e||c(t,20)||(n[t]="0x");return t}));for(const e in n)n[e]=yield A(e);e.verifyingContract&&n[e.verifyingContract]&&(e.verifyingContract=n[e.verifyingContract]);r=o.visit(r,((e,t)=>"address"===e&&n[t]?n[t]:t));return{domain:e,value:r}}))}static getPayload(e,t,r){TypedDataEncoder.hashDomain(e);const A={};const n=[];G.forEach((t=>{const r=e[t];if(null!=r){A[t]=O[t](r);n.push({name:t,type:F[t]})}}));const a=TypedDataEncoder.from(t);const s=w(t);s.EIP712Domain?M.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",t):s.EIP712Domain=n;a.encode(r);return{types:s,domain:A,primaryType:a.primaryType,message:a.visit(r,((e,t)=>{if(e.match(/^bytes(\d*)/))return o(i(t));if(e.match(/^u?int/))return l.from(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":"string"!==typeof t&&M.throwArgumentError("invalid string","value",t);return t}return M.throwArgumentError("unsupported type","type",e)}))}}}"use strict";export{TypedDataEncoder as _TypedDataEncoder,dnsEncode,ensNormalize,hashMessage,id,isValidName,v as messagePrefix,namehash};

