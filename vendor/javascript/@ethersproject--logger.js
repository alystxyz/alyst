const r="logger/5.7.0";"use strict";let e=false;let o=false;const t={debug:1,default:2,info:2,warning:3,error:4,off:5};let n=t.default;let s=null;function _checkNormalize(){try{const r=[];["NFD","NFC","NFKD","NFKC"].forEach((e=>{try{if("test"!=="test".normalize(e))throw new Error("bad normalize")}catch(o){r.push(e)}}));if(r.length)throw new Error("missing "+r.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(r){return r.message}return null}const E=_checkNormalize();var a;(function(r){r.DEBUG="DEBUG";r.INFO="INFO";r.WARNING="WARNING";r.ERROR="ERROR";r.OFF="OFF"})(a||(a={}));var N;(function(r){r.UNKNOWN_ERROR="UNKNOWN_ERROR";r.NOT_IMPLEMENTED="NOT_IMPLEMENTED";r.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION";r.NETWORK_ERROR="NETWORK_ERROR";r.SERVER_ERROR="SERVER_ERROR";r.TIMEOUT="TIMEOUT";r.BUFFER_OVERRUN="BUFFER_OVERRUN";r.NUMERIC_FAULT="NUMERIC_FAULT";r.MISSING_NEW="MISSING_NEW";r.INVALID_ARGUMENT="INVALID_ARGUMENT";r.MISSING_ARGUMENT="MISSING_ARGUMENT";r.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT";r.CALL_EXCEPTION="CALL_EXCEPTION";r.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS";r.NONCE_EXPIRED="NONCE_EXPIRED";r.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED";r.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT";r.TRANSACTION_REPLACED="TRANSACTION_REPLACED";r.ACTION_REJECTED="ACTION_REJECTED"})(N||(N={}));const i="0123456789abcdef";class Logger{constructor(r){Object.defineProperty(this,"version",{enumerable:true,value:r,writable:false})}_log(r,e){const o=r.toLowerCase();null==t[o]&&this.throwArgumentError("invalid log level name","logLevel",r);n>t[o]||console.log.apply(console,e)}debug(...r){this._log(Logger.levels.DEBUG,r)}info(...r){this._log(Logger.levels.INFO,r)}warn(...r){this._log(Logger.levels.WARNING,r)}makeError(r,e,t){if(o)return this.makeError("censored error",e,{});e||(e=Logger.errors.UNKNOWN_ERROR);t||(t={});const n=[];Object.keys(t).forEach((r=>{const e=t[r];try{if(e instanceof Uint8Array){let o="";for(let r=0;r<e.length;r++){o+=i[e[r]>>4];o+=i[15&e[r]]}n.push(r+"=Uint8Array(0x"+o+")")}else n.push(r+"="+JSON.stringify(e))}catch(e){n.push(r+"="+JSON.stringify(t[r].toString()))}}));n.push(`code=${e}`);n.push(`version=${this.version}`);const s=r;let E="";switch(e){case N.NUMERIC_FAULT:{E="NUMERIC_FAULT";const e=r;switch(e){case"overflow":case"underflow":case"division-by-zero":E+="-"+e;break;case"negative-power":case"negative-width":E+="-unsupported";break;case"unbound-bitwise-result":E+="-unbound-result";break}break}case N.CALL_EXCEPTION:case N.INSUFFICIENT_FUNDS:case N.MISSING_NEW:case N.NONCE_EXPIRED:case N.REPLACEMENT_UNDERPRICED:case N.TRANSACTION_REPLACED:case N.UNPREDICTABLE_GAS_LIMIT:E=e;break}E&&(r+=" [ See: https://links.ethers.org/v5-errors-"+E+" ]");n.length&&(r+=" ("+n.join(", ")+")");const a=new Error(r);a.reason=s;a.code=e;Object.keys(t).forEach((function(r){a[r]=t[r]}));return a}throwError(r,e,o){throw this.makeError(r,e,o)}throwArgumentError(r,e,o){return this.throwError(r,Logger.errors.INVALID_ARGUMENT,{argument:e,value:o})}assert(r,e,o,t){r||this.throwError(e,o,t)}assertArgument(r,e,o,t){r||this.throwArgumentError(e,o,t)}checkNormalize(r){null==r&&(r="platform missing String.prototype.normalize");E&&this.throwError("platform missing String.prototype.normalize",Logger.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:E})}checkSafeUint53(r,e){if("number"===typeof r){null==e&&(e="value not safe");(r<0||r>=9007199254740991)&&this.throwError(e,Logger.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:r});r%1&&this.throwError(e,Logger.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:r})}}checkArgumentCount(r,e,o){o=o?": "+o:"";r<e&&this.throwError("missing argument"+o,Logger.errors.MISSING_ARGUMENT,{count:r,expectedCount:e});r>e&&this.throwError("too many arguments"+o,Logger.errors.UNEXPECTED_ARGUMENT,{count:r,expectedCount:e})}checkNew(r,e){r!==Object&&null!=r||this.throwError("missing new",Logger.errors.MISSING_NEW,{name:e.name})}checkAbstract(r,e){r===e?this.throwError("cannot instantiate abstract class "+JSON.stringify(e.name)+" directly; use a sub-class",Logger.errors.UNSUPPORTED_OPERATION,{name:r.name,operation:"new"}):r!==Object&&null!=r||this.throwError("missing new",Logger.errors.MISSING_NEW,{name:e.name})}static globalLogger(){s||(s=new Logger(r));return s}static setCensorship(r,t){!r&&t&&this.globalLogger().throwError("cannot permanently disable censorship",Logger.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"});if(e){if(!r)return;this.globalLogger().throwError("error censorship permanent",Logger.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}o=!!r;e=!!t}static setLogLevel(r){const e=t[r.toLowerCase()];null!=e?n=e:Logger.globalLogger().warn("invalid log level - "+r)}static from(r){return new Logger(r)}}Logger.errors=N;Logger.levels=a;export{N as ErrorCode,a as LogLevel,Logger};

