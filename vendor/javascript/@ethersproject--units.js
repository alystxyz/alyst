import{formatFixed as t,parseFixed as n}from"@ethersproject/bignumber";import{Logger as r}from"@ethersproject/logger";const e="units/5.7.0";"use strict";const i=new r(e);const s=["wei","kwei","mwei","gwei","szabo","finney","ether"];function commify(t){const n=String(t).split(".");(n.length>2||!n[0].match(/^-?[0-9]*$/)||n[1]&&!n[1].match(/^[0-9]*$/)||"."===t||"-."===t)&&i.throwArgumentError("invalid value","value",t);let r=n[0];let e="";if("-"===r.substring(0,1)){e="-";r=r.substring(1)}while("0"===r.substring(0,1))r=r.substring(1);""===r&&(r="0");let s="";2===n.length&&(s="."+(n[1]||"0"));while(s.length>2&&"0"===s[s.length-1])s=s.substring(0,s.length-1);const o=[];while(r.length){if(r.length<=3){o.unshift(r);break}{const t=r.length-3;o.unshift(r.substring(t));r=r.substring(0,t)}}return e+o.join(",")+s}function formatUnits(n,r){if("string"===typeof r){const t=s.indexOf(r);-1!==t&&(r=3*t)}return t(n,null!=r?r:18)}function parseUnits(t,r){"string"!==typeof t&&i.throwArgumentError("value must be a string","value",t);if("string"===typeof r){const t=s.indexOf(r);-1!==t&&(r=3*t)}return n(t,null!=r?r:18)}function formatEther(t){return formatUnits(t,18)}function parseEther(t){return parseUnits(t,18)}export{commify,formatEther,formatUnits,parseEther,parseUnits};

