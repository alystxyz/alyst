import{isHexString as r,arrayify as t,stripZeros as e,hexDataSlice as s,hexDataLength as n,concat as o}from"@ethersproject/bytes";import{_base36To16 as d,_base16To36 as i,BigNumber as a}from"@ethersproject/bignumber";import{keccak256 as g}from"@ethersproject/keccak256";import{encode as c}from"@ethersproject/rlp";import{Logger as u}from"@ethersproject/logger";const h="address/5.7.0";"use strict";const l=new u(h);function getChecksumAddress(e){r(e,20)||l.throwArgumentError("invalid address","address",e);e=e.toLowerCase();const s=e.substring(2).split("");const n=new Uint8Array(40);for(let r=0;r<40;r++)n[r]=s[r].charCodeAt(0);const o=t(g(n));for(let r=0;r<40;r+=2){o[r>>1]>>4>=8&&(s[r]=s[r].toUpperCase());(15&o[r>>1])>=8&&(s[r+1]=s[r+1].toUpperCase())}return"0x"+s.join("")}const m=9007199254740991;function log10(r){return Math.log10?Math.log10(r):Math.log(r)/Math.LN10}const A={};for(let r=0;r<10;r++)A[String(r)]=String(r);for(let r=0;r<26;r++)A[String.fromCharCode(65+r)]=String(10+r);const f=Math.floor(log10(m));function ibanChecksum(r){r=r.toUpperCase();r=r.substring(4)+r.substring(0,2)+"00";let t=r.split("").map((r=>A[r])).join("");while(t.length>=f){let r=t.substring(0,f);t=parseInt(r,10)%97+t.substring(r.length)}let e=String(98-parseInt(t,10)%97);while(e.length<2)e="0"+e;return e}function getAddress(r){let t=null;"string"!==typeof r&&l.throwArgumentError("invalid address","address",r);if(r.match(/^(0x)?[0-9a-fA-F]{40}$/)){"0x"!==r.substring(0,2)&&(r="0x"+r);t=getChecksumAddress(r);r.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==r&&l.throwArgumentError("bad address checksum","address",r)}else if(r.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){r.substring(2,4)!==ibanChecksum(r)&&l.throwArgumentError("bad icap checksum","address",r);t=d(r.substring(4));while(t.length<40)t="0"+t;t=getChecksumAddress("0x"+t)}else l.throwArgumentError("invalid address","address",r);return t}function isAddress(r){try{getAddress(r);return true}catch(r){}return false}function getIcapAddress(r){let t=i(getAddress(r).substring(2)).toUpperCase();while(t.length<30)t="0"+t;return"XE"+ibanChecksum("XE00"+t)+t}function getContractAddress(r){let n=null;try{n=getAddress(r.from)}catch(t){l.throwArgumentError("missing from address","transaction",r)}const o=e(t(a.from(r.nonce).toHexString()));return getAddress(s(g(c([n,o])),12))}function getCreate2Address(r,t,e){32!==n(t)&&l.throwArgumentError("salt must be 32 bytes","salt",t);32!==n(e)&&l.throwArgumentError("initCodeHash must be 32 bytes","initCodeHash",e);return getAddress(s(g(o(["0xff",getAddress(r),t,e])),12))}export{getAddress,getContractAddress,getCreate2Address,getIcapAddress,isAddress};

