import{arrayify as e}from"@ethersproject/bytes";import{defineReadOnly as t}from"@ethersproject/properties";class BaseX{constructor(e){t(this,"alphabet",e);t(this,"base",e.length);t(this,"_alphabetMap",{});t(this,"_leader",e.charAt(0));for(let t=0;t<e.length;t++)this._alphabetMap[e.charAt(t)]=t}encode(t){let r=e(t);if(0===r.length)return"";let h=[0];for(let e=0;e<r.length;++e){let t=r[e];for(let e=0;e<h.length;++e){t+=h[e]<<8;h[e]=t%this.base;t=t/this.base|0}while(t>0){h.push(t%this.base);t=t/this.base|0}}let s="";for(let e=0;0===r[e]&&e<r.length-1;++e)s+=this._leader;for(let e=h.length-1;e>=0;--e)s+=this.alphabet[h[e]];return s}decode(t){if("string"!==typeof t)throw new TypeError("Expected String");let r=[];if(0===t.length)return new Uint8Array(r);r.push(0);for(let e=0;e<t.length;e++){let h=this._alphabetMap[t[e]];if(void 0===h)throw new Error("Non-base"+this.base+" character");let s=h;for(let e=0;e<r.length;++e){s+=r[e]*this.base;r[e]=255&s;s>>=8}while(s>0){r.push(255&s);s>>=8}}for(let e=0;t[e]===this._leader&&e<t.length-1;++e)r.push(0);return e(new Uint8Array(r.reverse()))}}const r=new BaseX("abcdefghijklmnopqrstuvwxyz234567");const h=new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");export{r as Base32,h as Base58,BaseX};

